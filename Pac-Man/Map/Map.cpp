//
//  Map.cpp
//  Pac-Man
//
//  Created by Andrés Caballero Toledo on 30/06/2020.
//  Copyright © 2020 act. All rights reserved.
//

#include "Map.h"

int map[MAP_HEIGHT][MAP_WIDTH] = {
    { 5,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18, 6},
    {15, 1, 1, 1, 1, 1, 1,13,14, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,13,14, 1, 1, 1, 1, 1, 1,16},
    {15, 2, 9,12,12,10, 1,13,14, 1, 9,12,12,12,12,12,12,10, 1,13,14, 1, 9,12,12,10, 2,16},
    {15, 1, 7,11,11, 8, 1, 7, 8, 1, 7,11,11,11,11,11,11, 8, 1, 7, 8, 1, 7,11,11, 8, 1,16},
    {15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,16},
    {12,12,10, 1, 9,10, 1, 9,12,12,12,10, 1, 9,10, 1, 9,12,12,12,10, 1, 9,10, 1, 9,12,12},
    { 0, 0,14, 1,13,14, 1,13, 0, 0, 0,14, 1,13,14, 1,13, 0, 0, 0,14, 1,13,14, 1,13, 0, 0},
    {11,11, 8, 1,13,14, 1, 7,11,11,11, 8, 1,13,14, 1, 7,11,11,11, 8, 1,13,14, 1, 7,11,11},
    { 0, 0, 0, 1,13,14, 1, 1, 1, 1, 1, 1, 1,13,14, 1, 1, 1, 1, 1, 1, 1,13,14, 1, 0, 0, 0},
    {12,12,10, 1, 9,12,12,12,10, 0, 9,12,12,12,12,12,12,10, 0, 9,12,12,12,10, 1, 9,12,12},
    { 0, 0,14, 1, 7,11,11,11, 8, 0, 7,11,11,11,11,11,11, 8, 0, 7,11,11,11, 8, 1,13, 0, 0},
    { 0, 0,14, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,13, 0, 0},
    { 0, 0,14, 1, 9,12,12,12,10, 0, 9,12,12,19,19,12,12,10, 0, 9,12,12,12,10, 1,13, 0, 0},
    { 0, 0,14, 1, 7,11,11,11, 8, 0,13, 0, 0, 0, 0, 0, 0,14, 0, 7,11,11,11, 8, 1,13, 0, 0},
    { 0, 0,14, 1,13,14, 0, 0, 0, 0,13, 0, 0, 0, 0, 0, 0,14, 0, 0, 0, 0,13,14, 1,13, 0, 0},
    { 0, 0,14, 1,13,14, 0, 9,10, 0,13, 0, 0, 0, 0, 0, 0,14, 0, 9,10, 0,13,14, 1,13, 0, 0},
    {11,11, 8, 1, 7, 8, 0,13,14, 0, 7,11,11,11,11,11,11, 8, 0,13,14, 0, 7, 8, 1, 7,11,11},
    { 0, 0, 0, 1, 0, 0, 0,13,14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,13,14, 0, 0, 0, 1, 0, 0, 0},
    {12,12,10, 1, 9,12,12,12,12,12,12,10, 0, 9,10, 0, 9,12,12,12,12,12,12,10, 1, 9,12,12},
    { 0, 0,14, 1, 7,11,11,11,11,11,11, 8, 0,13,14, 0, 7,11,11,11,11,11,11, 8, 1,13, 0, 0},
    { 0, 0,14, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,13,14, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,13, 0, 0},
    { 0, 0,14, 1, 9,12,12,12,10, 1, 9,12,12,12,12,12,12,10, 1, 9,12,12,12,10, 1,13, 0, 0},
    {11,11, 8, 1, 7,11,11,11, 8, 1, 7,11,11,11,11,11,11, 8, 1, 7,11,11,11, 8, 1, 7,11,11},
    {15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,16},
    {15, 1, 9,12,12,10, 1, 9,12,12,12,10, 1, 9,10, 1, 9,12,12,12,10, 1, 9,12,12,10, 1,16},
    {15, 1,13, 0, 0,14, 1, 7,11,11,11, 8, 1,13,14, 1, 7,11,11,11, 8, 1,13, 0, 0,14, 1,16},
    {15, 1,13, 0, 0,14, 1,13,14, 1, 1, 1, 1,13,14, 1, 1, 1, 1,13,14, 1,13, 0, 0,14, 1,16},
    {15, 2,13, 0, 0,14, 1,13,14, 1, 9,12,12,12,12,12,12,10, 1,13,14, 1,13, 0, 0,14, 2,16},
    {15, 1, 7,11,11, 8, 1, 7, 8, 1, 7,11,11,11,11,11,11, 8, 1, 7, 8, 1, 7,11,11, 8, 1,16},
    {15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,16},
    { 3,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17, 4},
};

int testMap[TEST_MAP_HEIGHT][TEST_MAP_WIDTH] = {
    {  5, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,  6},
    { 15,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 16},
    { 15,  1,  9, 10,  0,  0,  0,  0,  0,  0,  0,  9, 10,  1, 16},
    { 15,  1, 13, 14,  0,  0,  0,  2,  0,  0,  0, 13, 14,  1, 16},
    { 15,  1, 13, 14,  0,  0,  0,  0,  0,  0,  0, 13, 14,  1, 16},
    { 15,  1, 13, 14,  0,  0,  0,  0,  0,  0,  0, 13, 14,  1, 16},
    { 15,  1, 13, 14,  0,  0,  0,  2,  0,  0,  0, 13, 14,  1, 16},
    { 15,  1,  7,  8,  0,  0,  0,  0,  0,  0,  0,  7,  8,  1, 16},
    { 15,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 16},
    {  3, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,  4},
};

Texture mapTextures[TOTAL_MAP_BLOCKS];


bool tentativePosition(const int next_x, const int next_y) {
    // Clarification variables
    int next_block_y = next_y / BLOCK_HEIGHT;
    int next_block_x = next_x / BLOCK_WIDTH;    
    // If the block of the tentative position is blank, dot or bigdot...
    if (map[next_block_y][next_block_x] == BLANK ||
        map[next_block_y][next_block_x] == DOT ||
        map[next_block_y][next_block_x] == BIG_DOT) {
        return true;
    }
    
    return false;
}


void drawMap() {
    for (int y = 0; y < MAP_HEIGHT; ++y) {
        for (int x = 0; x < MAP_WIDTH; ++x) {
            int yx = map[y][x];
            mapTextures[yx].render((SCREEN_WIDTH / MAP_WIDTH) * x, (SCREEN_HEIGHT / MAP_HEIGHT) * y);
        }
    }
}
